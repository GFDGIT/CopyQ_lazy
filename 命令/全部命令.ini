[Commands]
1\Name=全局搜索
1\Command="
    copyq:
    // 默认快捷键与Win10自带输入法的简繁切换快捷键冲突，请自行调整
    // Name for tab for storing matching items.
    var search_tab_name = \"全局搜索\"
    // Returns true if item at index matches regex.
    function item_matches(item_index, re)
    {
        var item = getitem(item_index)
        var note = str(item[mimeItemNotes])
        var text = str(item[mimeText])
        try {
            var tag = str(plugins.itemtags.tags(item_index))
        } catch (e) {
            var tag = ''
        }
        return text && (re.test(text) || re.test(note) || re.test(tag))
    }
    // Ask for search expression.
    var match = dialog(\"搜索\")
    if (!match)
      abort()
    var re = new RegExp(match,'i') // 'i' case-insensitive
    // Clear tab with results.
    try {
      removeTab(search_tab_name)
    } catch (e) {}
    // Search all tabs.
    var tab_names = tab()
    for (var i in tab_names) {
      var tab_name = tab_names[i]
      tab(tab_name)
      var item_count = count()
      // Search all items in tab.
      for (var j = 0; j < item_count; ++j) {
        // Add matching item to tab with results.
        if (item_matches(j, re)) {
          var item = getItem(j)
          tab(search_tab_name)
          setItem(j, item)
          tab(tab_name)
        }
      }
    }
    show(search_tab_name)"
1\InMenu=true
1\Icon=
1\Shortcut=ctrl+shift+f
2\Name=筛选
2\Command="
    copyq:
    var image = {
        [mimeText]: '图片 ---------------- I',
        [mimeIcon]: '',
        filter: '(^image/.*)|(?=^file\\:.*\\.(png|jpe?g|bmp|svg|gif)$)',
        shortcut: 'i'
    }

    var file = {
        [mimeText]: '文件  ---------------- F',
        [mimeIcon]: '',
        filter: '(?=^file://)',
        shortcut: 'f'
    }

    var url = {
        [mimeText]: 'URL ---------------- U',
        [mimeIcon]: '',
        filter: '^(?=(https?|ftps?|smb|mailto)://)',
        shortcut: 'u'
    }

    var html = {
        [mimeText]: 'HTML',
        [mimeIcon]: '',
        filter: '^text/html$',
        shortcut: 'h'
    }

    var PhoneMail = {
        [mimeText]: '手机号/邮箱',
        [mimeIcon]: '',
        filter: '(^0{0,1}(13[0-9]|15[7-9]|153|156|18[7-9])[0-9]{8}$)|(^([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+\\.[a-zA-Z]{2,3}$)',
        shortcut: 'p'
    }

    var filters = [image, file, url, html, PhoneMail]
    var selectedFilter = ''
    var shortcut = str(data(mimeShortcut))

    if (shortcut) {
        for (let f in filters) {
            if (filters[f].shortcut === shortcut) {
                selectedFilter = filters[f].filter
                filter_toggle(selectedFilter)
                abort()
           }
        }
    }

    var selectedIndex = menuItems(filters)

    if (selectedIndex != -1) {
        selectedFilter = filters[selectedIndex].filter
        filter_toggle(selectedFilter)
    } else {
        filter('')
    }

    function filter_toggle(filter_) {
        if (filter() == filter_) {
            filter('')
        }
        else {
            filter('')
            filter(filter_)
        }
    }"
2\InMenu=true
2\Icon=
2\Shortcut=shift+f, f, i, u
3\Name=排序
3\Command="
    copyq:
    // 单选条目时对整个标签页进行排序
    // 多选条目时对选中的条目进行排序

    var sort_top_pinned = true

    var date_reverse = {
        [mimeText]: '最新在前',
        [mimeIcon]: '',
        format: \"application/x-copyq-user-item-time\",
        reverse: true
    }

    var date = {
        [mimeText]: '最旧在前',
        [mimeIcon]: '',
        format: \"application/x-copyq-user-item-time\",
        reverse: false
    }

    var pinned = {
        [mimeText]: '置顶固定',
        [mimeIcon]: '',
        format: \"application/x-copyq-item-pinned\",
        reverse: false
    }

    var alphabet = {
        [mimeText]: '字母顺序',
        [mimeIcon]: '',
        format: mimeText,
        reverse: false
    }
    var alphabet_reverse = {
        [mimeText]: '字母倒序',
        [mimeIcon]: '',
        format: mimeText,
        reverse: true
    }

    var size_reverse = {
        [mimeText]: '从大到小',
        [mimeIcon]: '',
        format: \"ItemSize\",
        reverse: true
    }

    var size = {
        [mimeText]: '从小到大',
        [mimeIcon]: '',
        format: \"ItemSize\",
        reverse: false
    }

    // 排序菜单项目
    var sorts = [
        date_reverse,
        date,
        pinned,
        alphabet,
        alphabet_reverse,
        size_reverse,
        size
    ]
    // 显示排序菜单
    var selectedIndex = menuItems(sorts)

    var sel = ItemSelection().current()
    if (sel.length <= 1) {
        // 当前标签页只一个条目，则退出
        length() <= 1 ? abort() : ''
        // 单选，将选区设置为整个标签页
        tab(selectedTab())
        sel = ItemSelection().selectAll()
        if (sort_top_pinned) handle_pinned(sel.length)
    } else {
        // 多选，判断是否从0开始选择。
        // 是：处理固定行；否：无操作
        if (sel.rows()[0] == 0 && sort_top_pinned) {
            handle_pinned(sel.length)
        }
    }

    const rows = sel.rows()
    var order = ''
    if (selectedIndex != -1) {
        // 获取选择的排序条件
        const selectedFormat = sorts[selectedIndex].format
        switch (selectedFormat) {
            case 'ItemSize':
                popup('排序中⏳', '', rows.length * 3)
                order = sizeList()
                break;
            case \"application/x-copyq-item-pinned\":
                order = sel.itemsFormat(selectedFormat).map((item) => item === undefined);
                break;
            default:
                order = sel.itemsFormat(selectedFormat)
        }
    } else {
        abort()
    }

    // 排序
    if (sorts[selectedIndex].reverse) {
        sel.sort((i, j) => order[i] > order[j]);
    } else {
        sel.sort((i, j) => order[i] < order[j]);
    }
    popup('排序完成✅', '', 1000)

    // 获取sel选区中每个条目的字节数
    function sizeList() {
        var items = sel.items()
        var sizes = []
        for (let row in rows) {
            var itemSize = 0
            var item = items[row]
            for (var format in item) {
                itemSize += read(format, row).size()
            }
            sizes.push(itemSize)
        }
        return sizes
    }

    // 处理固定行
    function handle_pinned(sel_length) {
        var pinned = []
        // 获取从0行开始连续的固定行
        for (var i = 0; i < sel_length; i++) {
            if (plugins.itempinned.isPinned(i)) {
                pinned.push(i)
            } else {
                break
            }
        }
        // 固定行向下移动1行
        if (0 < pinned.length < sel_length) {
            var selAll = ItemSelection().selectAll()
            selAll.deselectIndexes(pinned)
            selAll.invert().move(pinned.length + 1)
        }
    }"
3\InMenu=true
3\Icon=
3\Shortcut=shift+s
4\Name=----------------------------------
4\Command="
    // 虚拟分割线


    "
4\InMenu=true
5\Name=另存为
5\Command="
    copyq:
    var defaultPath = Dir().homePath()
    var customPath = '/Desktop'
    var suffices = {
      'image/svg': 'svg',
      'image/png': 'png',
      'image/jpeg': 'jpg',
      'image/jpg': 'jpg',
      'image/bmp': 'bmp',
      'text/html': 'html',
      'text/plain' : 'txt',
    }

    if (customPath) {
        currentpath(customPath)
    }
    else {
        currentpath(defaultPath)
    }

    function hasSuffix(fileName)
    {
      return /\\.[0-9a-zA-z]+$/.test(fileName);
    }
    function addSuffix(fileName, format)
    {
      var suffix = suffices[format]
      return suffix ? fileName + \".\" + suffix : fileName
    }
    function filterFormats(format)
    {
      return /^[a-z]/.test(format) && !/^application\\/x/.test(format)
    }
    function itemFormats(row)
    {
      return str(read('?', row))
        .split('\\n')
        .filter(filterFormats)
    }
    function formatPriority(format)
    {
      var k = Object.keys(suffices);
      var i = k.indexOf(format);
      return i === -1 ? k.length : i
    }
    function reorderFormats(formats)
    {
      formats.sort(function(lhs, rhs){
        var i = formatPriority(lhs);
        var j = formatPriority(rhs);
        return i === j ? lhs.localeCompare(rhs) : i - j;
      })
    }
    if (selectedtab()) tab(selectedtab())
    var row = selectedtab() ? currentitem() : -1
    var formats = itemFormats(row)
    reorderFormats(formats)
    var defaultFileName = dateString('yyyy-MM-dd ')+'未命名'
    var keyFormat = '格式'
    var keyFileName = '文件名'
    var defaultFormat = formats[0]
    var result = dialog(
      '.title', '另存为...',
      '.width', 300,
      keyFormat, [defaultFormat].concat(formats),
      keyFileName, File(defaultFileName)
    ) || abort()
    var fileName = result[keyFileName]
    var format = result[keyFormat]
    if (!format || !fileName)
      abort()
    if (!hasSuffix(fileName))
      fileName = addSuffix(fileName, format)
    var f = File(fileName)
    if (!f.open()) {
      popup('打开失败 \"' + f.fileName() + '\"', f.errorString())
      abort()
    }
    f.write(selectedtab() ? getitem(currentitem())[format] : clipboard(format))
    popup(\"保存成功\", '条目已保存为 \"' + f.fileName() + '\".')"
5\InMenu=true
5\Shortcut=ctrl+s
6\Name=清理当前标签页
6\MatchCommand="
    copyq: tab(selectedTab()); if (size() == 0) fail()"
6\Command="
    copyq:
    var source_tab = selectedtab()
    var sel = ItemSelection(selectedTab()).selectRemovable()

    if (sel.length === 0)
        abort()

    if (source_tab == settings('trash_tab')) {
        var text = dialog(
            '.title', '确认清理？',
            '.label', '<font size=8>⚠︎</font><font size=4>&nbsp;无法撤销！',
            '.combo:确认 ', ['是', '否']
        )
        if (text == '是') {
            sel.removeAll()
        }
    }"
6\InMenu=true
6\Icon=
7\Name=检查过期条目
7\Command="
    copyq:
    check_items_expire(1)

    "
7\InMenu=true
7\Icon=
8\Name=撤销删除
8\Command="
    copyq:
    // true: update time_mime and tags_mime
    // false: keep tags, and use time from tags
    const update_item_time = true;

    const trash_tab = settings(\"trash_tab\");
    const tab_mime = \"application/x-copyq-user-tab\";
    const index_mime = \"application/x-copyq-user-index\";
    const time_mime = \"application/x-copyq-user-time\";
    const tags_mime = \"application/x-copyq-tags\";
    const now = dateString(\"yyyy-MM-dd hh:mm:ss\");
    const time_reg = /\\d{4}-\\d{2}-\\d{2} \\d{2}\\:\\d{2}\\:\\d{2}/;

    tab(trash_tab);
    if (length() == 0) {
        popup('Nothing to undo.');
        abort();
    }

    const trigger_tab = selectedTab();
    let remove_rows = []; // list to be remove, type: int array
    let target_index = [];
    let items = []; // list to be restore, type: item array
    let target_tab = [];

    // Triggered from the trash tab, only selected items are restored
    if (trigger_tab == trash_tab) {
        items = ItemSelection().current().items();
        remove_rows = selectedItems();
        target_tab = items.map(item => str(item[tab_mime]) || selectedTab());
        target_index = items.map((_, i) => i);    // items are always restored at the top of the tab
    } else {
        let item = getitem(0);
        let time = str(item[time_mime]);
        let i = 0;
        while (true) {
            target_tab.push(str(item[tab_mime]) || selectedTab());
            target_index.push(item[index_mime] || 0)
            remove_rows.push(i);
            items.push(item);

            item = getItem(++i)
            if (!time || time !== str(item[time_mime])) {
                break;
            }
        }
    }

    for (let i = items.length-1; i >=0; i--) {
        let item = items[i];

        delete item[tab_mime];
        delete item[index_mime];

        let old_tag = str(item[tags_mime]);
        let old_time = old_tag.match(time_reg);
        if (update_item_time && old_time) {
            item[time_mime] = now;
            item[tags_mime] = old_tag.replace(old_time, now);
        } else {
            item[time_mime] = old_time;
        }
        tab(target_tab[i]);
        insert(target_index[i], item);
    }

    show(target_tab[0]);
    tab(target_tab[0]);

    selectItems.apply(this, target_index);

    tab(trash_tab);
    remove.apply(this, remove_rows);"
8\InMenu=true
8\Icon=
8\Shortcut=ctrl+z
9\Name=删除至回收站
9\Command="
    const onItemsRemoved_ = global.onItemsRemoved
    global.onItemsRemoved = function () {
        const trash_tab = '回收站'
        const tab_mime = 'application/x-copyq-user-tab'
        const index_mime = 'application/x-copyq-user-index'
        const time_mime = 'application/x-copyq-user-time'

        const source_tab = selectedtab()
        const sel = ItemSelection().current()

        if (!settings('trash_tab')) 
            settings('trash_tab', trash_tab)

        tab(trash_tab)
        var available = config('maxitems') - count()
        if (sel.length > available) {
            popup('待删除条目过多，无法移至回收站。\\n请先清理回收站，或调大条目历史数量上限。', 3000)
        }
        if (source_tab == trash_tab) {
            serverLog(`Removing ${sel.length} items from ${source_tab}`)
        } else {
            serverLog(`Removing ${sel.length} items from ${source_tab} to ${trash_tab}`)
            const time = dateString('yyyy-MM-dd hh:mm:ss.zzz')

            const rows = sel.rows()
            let trashed = sel.items().map((item, i) => {
                item[tab_mime] = source_tab
                item[index_mime] = rows[i]
                item[time_mime] = time
                return item
            })

            tab(trash_tab)
            write(0, trashed)
            tab(source_tab)
        }
        onItemsRemoved_()
    }"
9\IsScript=true
9\Icon=
10\Name=----------------------------------
10\Command="
    // 虚拟分割线

    "
10\InMenu=true
11\Name=切换固定
11\MatchCommand="
    copyq:
    var row = index()
    if (plugins.itempinned.isPinned(row)) {
        menuItem['text'] = '取消固定'
        menuItem['tag'] = 'x'
    } else {
        menuItem['text'] = '固定'
        menuItem['tag'] = ''
    }"
11\Command="
    copyq:
    // 是否移动至标签页顶部
    var top = true

    var len = selectedItems().length
    if (plugins.itempinned.isPinned(currentItem())) {
        plugins.itempinned.unpin()
        removeData(mimeColor)
    } else {
        var color = 'rgba(255,0,0,0.1)'
        setData(mimeColor, color)
        plugins.itempinned.pin()
        if (top) {
            move(0)
            selectItems.apply(this, Array.from({length: len}, (_, i) => i))
        }
    }"
11\InMenu=true
11\Icon=
11\Shortcut=ctrl+shift+p
12\Name=切换高亮
12\MatchCommand="
    copyq:
    var color = 'rgba(255, 255, 0, 0.5)'
    var currentColor = str(selectedItemData(0)[mimeColor])
    if (currentColor != color) {
        menuItem['text'] = '高亮'
        menuItem['tag'] = '__'
        menuItem['color'] = color.replace(/\\d+\\.\\d+/, 1)
    } else {
        menuItem['text'] = '取消高亮'
        menuItem['tag'] = 'x'
        menuItem['color'] = 'white'
    }"
12\Command="
    copyq:
    var color = 'rgba(255, 255, 0, 0.5)'
    var currentColor = str(selectedItemData(0)[mimeColor]);
    if (currentColor != color) {
        setData(mimeColor, color)
    } else {
        removeData(mimeColor)
    }"
12\InMenu=true
12\Enable=false
12\Icon=
12\Shortcut=ctrl+m
13\Name=标记|切换“重要”标记
13\Command="
    copyq: (plugins.itemtags.hasTag(decodeURIComponent('%E9%87%8D%E8%A6%81')) ? plugins.itemtags.untag : plugins.itemtags.tag)(decodeURIComponent('%E9%87%8D%E8%A6%81'))
    "
13\InMenu=true
13\Icon=
13\Shortcut=shift+i
14\Name=标记|添加一个标记
14\Command="
    copyq: plugins.itemtags.tag()

    "
14\InMenu=true
14\Icon=
14\Shortcut=shift+t
15\Name=标记|移除一个标记
15\Command="
    copyq: plugins.itemtags.untag()

    "
15\InMenu=true
15\Icon=
15\Shortcut=ctrl+shift+t
16\Name=标记|清理所有标记
16\Command="
    copyq: plugins.itemtags.clearTags()

    "
16\InMenu=true
16\Icon=
17\Name=----------------------------------
17\Command="
    // 虚拟分割线

    "
17\InMenu=true
18\Name=合并所选项
18\MatchCommand="
    copyq:
    if (selectedItems().length < 2) fail()
    "
18\Command="
    copyq add -- %1
    "
18\InMenu=true
19\Name=粘贴为纯文本
19\Command="
    copyq:
    var text = input()
    copy(text)
    copySelection(text)
    paste()"
19\InMenu=true
19\HideWindow=true
19\Icon=
19\Shortcut=shift+v
20\Name=清理格式并粘贴
20\Command="
    copyq:

    var text = str(input())

    if (!text) {
      try {
        copy()
      } catch (e) {
        popup('复制失败，请重新选择文本！', e, time=2000)
        abort() 
      }
      text = str(clipboard())
    }

    copy(format(text))
    paste()

    function format(text) {
        //全角转半角
        text = ToCDB(text).trim()
        // 删除所有回车换行符
        text = text.replace(new RegExp(/[\\r\\n]+/g), ' ')
        // 两个以上的空格替换成一个
        text = text.replace(new RegExp(/\\s+/g), ' ')
        // 删除单个字母（A/a除外）之间的空格
        text = text.replace(/([^Aa])\\s(?!\\S{2,}|A|a)/g,'$1')
        return text
    }

    function ToCDB(str) { 
        var tmp = \"\"
        for(var i=0;i<str.length;i++){ 
            if (str.charCodeAt(i) == 12288){
                tmp += String.fromCharCode(str.charCodeAt(i)-12256)
                continue
            }
            if(str.charCodeAt(i) > 65280 && str.charCodeAt(i) < 65375){ 
                tmp += String.fromCharCode(str.charCodeAt(i)-65248)
            } 
            else{ 
                tmp += String.fromCharCode(str.charCodeAt(i))
            } 
        } 
        return tmp 
    }"
20\InMenu=true
20\HideWindow=true
20\Icon=
20\Shortcut=alt+shift+f
21\Name=用浏览器打开
21\Match="^(?=(https?|ftps?|smb|mailto)://)(?=\\S{12,})"
21\Command="
    copyq open %1






    "
21\InMenu=true
21\HideWindow=true
21\Icon=
21\Shortcut=ctrl+b
22\Name=----------------------------------
22\Command="
    // 虚拟分割线

    "
22\InMenu=true
23\Name=显示/隐藏标签页
23\Command="
    copyq:
    var on = config(\"hide_tabs\") === \"true\"
    config(\"hide_tabs\", !on)"
23\InMenu=true
23\Enable=false
23\Icon=
23\Shortcut=f11
24\Name=切换置顶状态
24\MatchCommand="
    copyq:
    var on = config(\"always_on_top\") === \"true\"
    if (on) {
      menuItem['text'] = '取消置顶'
      menuItem['tag'] = 'x'
    } else {
      menuItem['text'] = '置顶窗口'
      menuItem['tag'] = ''
    }"
24\Command="
    copyq:
    var rows = selectedItems()
    var on = config(\"always_on_top\") === \"true\"

    config(\"always_on_top\", !on)
    config(\"activate_closes\",on)
    config(\"close_on_unfocus\",on)

    selectItems.apply(this, rows)"
24\InMenu=true
24\Icon=
24\Shortcut=ctrl+`
25\Name=切换简洁模式
25\MatchCommand="
    copyq:
    var on = config(\"show_simple_items\") === \"true\"
    if (on) {
      menuItem['text'] = '普通模式'
      menuItem['icon'] = ''
    } else {
      menuItem['text'] = '简洁模式'
      menuItem['icon'] = ''
    }"
25\Command="
    copyq:

    popup('按 F8 切换简洁/普通模式','',3000)

    var rows = selectedItems()

    var on = config(\"show_simple_items\") === \"true\"

    // 不要随意调整下面选项的顺序，可能导致切换模式时窗口闪烁增加

    // 隐藏标签栏
    config(\"hide_tabs\", !on)

    // 隐藏工具栏
    config(\"hide_toolbar\", !on)

    // 单行显示，不能关闭此项
    config(\"show_simple_items\", !on)

    // 切换主题（pure主题会隐藏菜单栏，mint则不会）
    !on ? loadTheme(\"./config/copyq/themes/pure.ini\") : loadTheme(\"./config/copyq/themes/mint.ini\")

    // 失去焦点时不关闭窗口
    config(\"activate_closes\", on)
    config(\"close_on_unfocus\", on)

    // 置顶显示，关闭此项可大幅减少窗口闪烁
    // config(\"always_on_top\",!on)

    selectItems.apply(this, rows)"
25\InMenu=true
25\Icon=
25\Shortcut=f8
26\Name=自动预览图片/长文本
26\MatchCommand="
    copyq:
    if (visible()) {
        if (settings('AutoPreview') == 1) {

            if (selectedItems().length > 1) {
                preview(false)
                abort()
            }

            var preview_image = true
            var preview_longText = true

            // The characters count of long-text
            var LongTextCharacters = 100
            // The lines count of long-text
            var LongTextLines = 2

            var format = str(dataFormats())
            var content = str(data(mimeUriList)) || str(data(mimeText))

            icon_on()
            preview(condition())
        } else {
            icon_off()
        }
    }
    function condition() {
        return (
            preview_image && (/image\\/.*/.test(format) || /^file:.*(png|jpe?g|bmp|svg|gif|ico|webp)$/.test(content))
            ||
            preview_longText && (content.length > LongTextCharacters || (content.split(/\\n/)).length > LongTextLines)
        )
    }
    function icon_on() {
        menuItem['text'] = '关闭自动预览'
        menuItem['icon'] = ''
    }
    function icon_off() {
        menuItem['text'] = '开启自动预览'
        menuItem['icon'] = ''
    }"
26\Command="
    copyq:
    if (str(data(mimeShortcut))=='space') {
        preview(!preview())
        abort()
    }
    if (settings('AutoPreview') == 1) {
        settings('AutoPreview', 0)
        popup('自动预览❎','',1200)
    } else {
        settings('AutoPreview', 1)
        popup('自动预览✅','',1200)
    }
    "
26\InMenu=true
26\Icon=
26\Shortcut=f7, space
27\Name=----------------------------------
27\Command="
    // 虚拟分割线



    "
27\InMenu=true
27\Enable=false
28\Name=自动合并换行
28\Command="
    copyq:
    function isAlphaNumeric(s) {
        return /^[a-zA-Z0-9]+$/.test(s);
    }

    function mergeLinesIntoParagraph(text) {
        const paragraphEndFlags = ['.', '!', '?', '？', '！', '。'];
        const lines = text.split('\\n').map(str => str.trim()).filter(str => str !== '');
        const paragraphs = [];
        var currentParagraph = '';
        for (var i = 0; i < lines.length; i++) {
            const line = lines[i];
            const lastChar = line.charAt(line.length - 1);
            const isEndOfSentence = paragraphEndFlags.indexOf(lastChar) > -1;
            currentParagraph += line + (isAlphaNumeric(lastChar) ? ' ' : '');
            if (isEndOfSentence) {
                paragraphs.push(currentParagraph.trim());
                currentParagraph = '';
            }
        }
        paragraphs.push(currentParagraph.trim());
        const mergedText = paragraphs.join('\\n');
        return mergedText;
    }
    var mytext = str(clipboard('text/plain'));
    if (mytext) {
        tab(selectedtab());
        myindex = index() + 1;
        write(myindex, 'text/plain', mergeLinesIntoParagraph(mytext));
        select(myindex);
        paste();
    }
    "
28\IsGlobalShortcut=true
28\Enable=false
28\Icon=
29\Name=剪贴板粘贴为纯文本
29\Command="
    copyq: 
    var text = clipboard()
    copy(text)
    copySelection(text)
    paste()"
29\IsGlobalShortcut=true
29\Icon=T
29\GlobalShortcut=ctrl+shift+v
29\InternalId=copyq_global_paste_clipboard_plain
30\Name=粘贴并复制上一项
30\Command="
    copyq: paste(); previous()"
30\IsGlobalShortcut=true
30\Icon=
30\GlobalShortcut=ctrl+f9
30\InternalId=copyq_global_paste_copy_previous
31\Name=粘贴并复制下一项
31\Command="
    copyq: paste(); next()"
31\IsGlobalShortcut=true
31\Icon=
31\GlobalShortcut=ctrl+f10
31\InternalId=copyq_global_paste_copy_next
32\Name=粘贴第N项
32\Command="
    copyq:
    var n = str(data(mimeShortcut)).slice(-1)
    select(n)
    paste()"
32\IsGlobalShortcut=true
32\Enable=false
32\Icon=
32\GlobalShortcut=ctrl+shift+0, ctrl+shift+1, ctrl+shift+2, ctrl+shift+3, ctrl+shift+4, ctrl+shift+5, ctrl+shift+6, ctrl+shift+7, ctrl+shift+8, ctrl+shift+9
33\Name=强制复制（当关闭捕获时）
33\Command="
    copyq:
    copy()

    if (monitoring())
        abort()

    var item = {}
    for (const format of clipboardFormatsToSave()) {
        var data = clipboard(format)
        if (data.length)
            item[format] = data
    }
    /*
    var time = dateString('yyyy-MM-dd hh:mm:ss')
    var tagsMime = 'application/x-copyq-tags'
    var timeMime = 'application/x-copyq-user-item-time'

    item[timeMime] = time
    item[tagsMime] = time
    */
    add(item)"
33\IsGlobalShortcut=true
33\Icon=
33\GlobalShortcut=alt+c
34\Name=粘贴当前日期和时间
34\Command="
    copyq:
    var time = dateString('yyyy'+'年'+'MM'+'月'+'dd'+'日 '+'hh:mm')
    copy(time)
    paste()"
34\IsGlobalShortcut=true
34\Icon=
34\GlobalShortcut=alt+shift+t
35\Name=切换 大写/小写/首字母大写
35\Command="
    copyq:
    try {
        copy()
    } catch (e) {
        popup('复制失败，请重新选择文本！', e)
        abort()
    }

    var text = str(clipboard())

    var UpperCase = text.toUpperCase()
    var LowerCase = text.toLowerCase()
    var TitleCase = toTitleCase(text)

    if (text == UpperCase) {
      text = LowerCase
    }
    else {
      if (text == LowerCase) {
        text = TitleCase
      }
      else
         text=UpperCase
    }

    copy(text)
    paste()

    function toTitleCase(str) {
      return str.replace(
        /\\w\\S*/g,
        function(txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        }
      );
    }"
35\IsGlobalShortcut=true
35\Icon=
35\GlobalShortcut=meta+ctrl+u
36\Name=显示/隐藏主窗口
36\Command="
    copyq:
    // 要显示的标签页，留空则显示上次打开的标签页
    const tabName = ''
    // 居中显示窗口
    const center = true
    // 在鼠标指针下显示窗口，关闭居中时生效
    const showAtCursor = true
    // 窗口大小，居中窗口时生效（单位：像素）
    const windowSize = { w: 1000, h: 600 }
    // 系统缩放系数，100%=1.0，125%=1.25
    const sys_Scale_Factor = 1.0

    // 屏幕分辨率
    let resolution = settings('ScreenResolution')
    if (!resolution) {
        resolution = [1920, 1080]
        getScreenResolution()
    }

    // Qt缩放系数[x, y]（估算值）
    const QT_SCALE_FACTOR = [1.2608, 1.32]

    const w = windowSize.w / QT_SCALE_FACTOR[0] / sys_Scale_Factor ** 2
    const h = windowSize.h / QT_SCALE_FACTOR[1] / sys_Scale_Factor ** 2

    let windowPotion = { x: 0, y: 0 }

    if (visible()) {
        hide()
    } else {
        if (center) {
            windowPotion.x = Math.round((resolution[0] - windowSize.w) / 2)
            windowPotion.y = Math.round((resolution[1] - windowSize.h) / 2)
            showAt(windowPotion.x, windowPotion.y, Math.round(w), Math.round(h), tabName)
        }
        else {
            showAtCursor ? showAt() : show()
        }
    }"
36\IsGlobalShortcut=true
36\Icon=
36\GlobalShortcut=alt+v
37\Name=----------------------------------
37\Command="
    // 虚拟分割线


    "
37\InMenu=true
37\Enable=false
38\Name=储存窗口名
38\Command="
    copyq:
    const tags_mime = 'application/x-copyq-tags'
    const window = str(data(mimeWindowTitle))
    const oldTags = data(tags_mime)
    const reg = /([^-–—]{1,30})$/
    const title = window.match(reg)[0].trim()
    let tags = ''
    oldTags=='' ? tags = title : tags = `${oldTags}, ${title}`
    setData(tags_mime, tags)"
38\Automatic=true
38\Icon=
39\Name=储存条目时间
39\Command="
    copyq:
    const time_mime = 'application/x-copyq-user-time'
    const tags_mime = 'application/x-copyq-tags'
    const time = dateString('yyyy-MM-dd hh:mm:ss')
    const oldTags = data(tags_mime)
    let tags = ''
    oldTags=='' ? tags = time : tags = `${oldTags}, ${time}`
    setData(tags_mime, tags)
    setData(time_mime, time)"
39\Automatic=true
39\Icon=
40\Name=复制命令时通知导入
40\Match=^\\[Commands?\\]|https?://github\\.com/.*/copyq-commands/blob/.*\\.ini
40\Command="
    copyq:
    // Imports raw commands code (starting with [Command] or [Commands])
    // or from a link ('https://github.com/**/copyq-commands/blob/**.ini').
    var timeOutSeconds = 10
    var rawDataUrlPrefix = 'https://raw.githubusercontent.com'
    // Don't run this when mouse selection changes.
    if ( dataFormats().indexOf(mimeClipboardMode) != -1 )
      abort()
    function importCommandsFromUrl(url)
    {
      var m = url.match(/^https?:\\/\\/github\\.com(\\/.*)\\/blob(\\/.*\\.ini)/)
      if (!m)
        return;
      var rawDataUrl = rawDataUrlPrefix + m[1] + m[2]
      var reply = networkGet(rawDataUrl)
      var commandsData = str(reply.data)
      if (reply.status != 200) {
        throw '命令获取失败！'
            + '\\nStatus code: ' + reply.status
            + '\\nError: ' + reply.error
      }
      if ( !commandsData.match(/^\\[Commands?\\]/) )
        return;
      return importCommands(commandsData);
    }
    var cmds = importCommandsFromUrl(str(input())) || importCommands(input())
    var list = '<ul>'
    for (var i in cmds) {
      var cmd = cmds[i]
      var cmdType =
        cmd.automatic ? 'automatic' :
        cmd.inMenu ? 'menu/shortcut' :
        cmd.globalShortcuts ? 'global shortcut' : '<b>???</b>';
      list += '<li>' + escapeHtml(cmds[i].name) + ' (' + cmdType + ')</li>'
    }
    list += '</ul>'
    var message = '<p>从剪贴板<b>导入</b>命令？</p>' + list
    notification(
      '.title', '有可用的CopyQ命令',
      '.message', message,
      '.time', timeOutSeconds*1000,
      '.icon', '',
      '.id', 'CopyQ_commands_in_clipboard',
      '.button', '取消', '', '',
      '.button', '导入', 'copyq: addCommands( importCommands(input()) )', exportCommands(cmds)
    )"
40\Input=text/plain
40\Automatic=true
40\Icon=
41\Name=大文件标签页
41\Command="
    copyq:
    const tabName = '大文件'
    // 文件大小，默认值1000kb
    const minBytes = 1000 * 1000
    // 是否识别复制的本地文件大小
    // 主要用于避免视频等大文件同步
    const readFileSize = true

    function hasBigData() {
        let itemSize = 0
        let formats = dataFormats()
        for (let i in formats) {
            if (readFileSize && formats[i] == 'text/uri-list') {
                let fpath = str(data(formats[i])).split('///')[1]
                let f = new File(fpath)
                itemSize += f.size()
            } else
                itemSize += data(formats[i]).size()
            }
            
            if (itemSize >= minBytes) {
                return true
        }
        return false
    }

    if (hasBigData()) {
        setData(mimeOutputTab, tabName)
    }"
41\Automatic=true
41\Enable=false
41\Icon=
42\Name=图片标签页
42\Command="
    copyq:
    var imageTab = '图片'
    var formats = dataFormats()
    for (var i in formats) {
        if (formats[i].match(/^image\\//)) {
            setData(mimeOutputTab, imageTab)
            break
        }
    }"
42\Automatic=true
42\Enable=false
42\Icon=
43\Name=自动清理过期条目
43\Command="
    // Require commands：Store Copy Time、Move to Trash (Undoable)

    // Get clipboard, trash_tab names
    const clip_tab = config(\"clipboard_tab\");
    const trash_tab = settings(\"trash_tab\");

    let tabs_times = {};
    // Set the tabs to clean and the expiration time (in hours)
    // The default is 15 days for the clipboard and 30 days for the trash_tab
    tabs_times[trash_tab] = 30 * 24;   // Clean up the trash_tab first to make space
    tabs_times[clip_tab] = 15 * 24;

    // check items expiration on copyq start
    const onStart_ = global.onStart
    global.onStart = function () {
        onStart_()
        check_items_expire()
    }

    // check_items_expire can be called manually
    // and will ignore the interval
    global.check_items_expire = function (manual = false) {
        const time_mime = \"application/x-copyq-user-time\";
        const now = new Date();
        if (!manual) {
            const interval = Math.min(...Object.values(tabs_times)) / 10;
            const last_check_time = new Date(settings(\"last_check_time\"));
            if (hoursBetween(now, last_check_time) < interval) {
                return;
            }
        }
        settings(\"last_check_time\", str(now));
        let de_sel = [];
        let count = {};
        for (let t in tabs_times) {
            const hours = tabs_times[t];
            tab(t);
            let sel = ItemSelection().selectRemovable();
            let items = sel.items();
            for (let i=0; i < items.length; i++) {
                let item_time = items[i][time_mime];
                if (hoursBetween(now, new Date(item_time)) < hours) {
                    de_sel.push(i);
                }
            }
            sel = sel.deselectIndexes(de_sel);
            count[t] = sel.length;
            if (count[t]> 0) sel.removeAll();
        }
        return count;
    };
    // Calculate the time difference in hours
    function hoursBetween(now, then) {
        let hours = (now - then) / (1000 * 60 * 60);
        return Math.floor(hours);
    }"
43\IsScript=true
43\Icon=
44\Name=修改时更新条目时间
44\Command="
    const onItemsChanged_ = global.onItemsChanged

    global.onItemsChanged = function () {
        onItemsChanged_()
        
        const tags_mime = 'application/x-copyq-tags'
        const time_mime = 'application/x-copyq-user-time'
        const time = dateString('yyyy-MM-dd hh:mm:ss')
        const rows = selectedItems()
        tab(selectedTab())
        for (let i = 0; i < rows.length; i++) {
            const item = getItem(rows[i])
            const old_tag = str(item[tags_mime])
            // get old_time from tags or time_mime
            const old_time = old_tag.match(/\\d{4}-\\d{2}-\\d{2} \\d{2}\\:\\d{2}\\:\\d{2}/) || str(item[time_mime])

            if (old_time != 'undefined') {
                // Ignore repeated calls within 1 second
                if (new Date(time) - new Date(old_time) < 1000)
                    return
            }
            let new_tag = ''
            if (old_tag != 'undefined') {
                if (old_tag.includes(old_time)) {
                    new_tag = old_tag.replace(old_time, time)
                } else {
                    new_tag = old_tag + ',' + time
                }
            } else {
                new_tag = time
            }
            change(rows[i], time_mime, time, tags_mime, new_tag)
        }
    }"
44\IsScript=true
44\Icon=
45\Name=按时清理过期条目
45\Command="
    // 依赖：保存复制时间、移至回收站
    // 其他标签页的条目先删除至回收站
    // 回收站中条目过期时直接删除

    // 获取剪贴板、回收站标签页名称
    const clip_tab = config(\"clipboard_tab\");
    const trash_tab = settings(\"trash_tab\");

    let tabs_times = {};
    // 设置要清理的标签页和过期时间（单位：小时）
    // 默认为剪贴板 15 天，回收站 30 天
    tabs_times[`${trash_tab}`] = 30 * 24; // 先清理回收站以便腾出空间
    tabs_times[`${clip_tab}`] = 15 * 24;


    const onStart_ = global.onStart
    global.onStart = function () {
        onStart_()
        check_items_expire()
    }

    global.check_items_expire = function (enforce = false) {
        const time_mime = \"application/x-copyq-user-time\";
        const now = new Date();
        if (!enforce) {
            const interval = Math.min(...Object.values(tabs_times)) / 10;
            const last_check_time = new Date(settings(\"last_check_time\"));
            if (hoursBetween(now, last_check_time) < interval) {
                return;
            }
        }
        settings(\"last_check_time\", str(now));
        let count = {};
        for (let t in tabs_times) {
            const hours = tabs_times[t];
            tab(t);
            let sel = ItemSelection().selectRemovable();
            let de_sel = [];
            const items = sel.items();
            for (let i = 0; i < items.length; i++) {
                const item_time = items[i][time_mime];
                if (hoursBetween(now, new Date(item_time)) < hours) {
                    de_sel.push(i);
                }
            }
            sel = sel.deselectIndexes(de_sel);
            count[t] = sel.length;
             if (count[t] > 0) sel.removeAll();
        }
        return count;
    };
    // 计算时间差，单位：小时
    global.hoursBetween = function (now, then) {
        let hours = (now - then) / (1000 * 60 * 60);
        return Math.floor(hours);
    }"
45\IsScript=true
45\Icon=
46\Name=复制/粘贴文件支持
46\Command="
    // 不支持剪切操作
    var originalFunction = global.clipboardFormatsToSave
    global.clipboardFormatsToSave = function() {
        return originalFunction().concat([
            mimeUriList,
            'x-special/gnome-copied-files',
            'application/x-kde-cutselection',
        ])
    }"
46\IsScript=true
46\Icon=
47\Name=复制时图标红点提示
47\Command="
    var timeMs = 10000;
    var iconTags = [
        '',
        ' ',
        '  ',
        '',
    ]
    function clipboardNotification() {
        var id = Number(settings('icon-activation-id') || 0) + 1;
        settings('icon-activation-id', id);
        iconTagColor('red');
        for (const tag of iconTags.values()) {
            if ( settings('icon-activation-id') != id )
                break;
            iconTag(tag);
            sleep(timeMs);
        }
    }
    onClipboardChanged_ = onClipboardChanged
    onClipboardChanged = function() {
        onClipboardChanged_()
        clipboardNotification()
    }
    onOwnClipboardChanged_ = onOwnClipboardChanged
    onOwnClipboardChanged = function() {
        onOwnClipboardChanged_()
        clipboardNotification()
    }
    onHiddenClipboardChanged_ = onHiddenClipboardChanged
    onHiddenClipboardChanged = function() {
        onHiddenClipboardChanged_()
        clipboardNotification()
    }"
47\IsScript=true
47\Icon=
48\Name=忽略空字符或单个字符的条目
48\Command="
    function hasEmptyOrSingleCharText() {
        if (dataFormats().includes(mimeText)) {
            var text = str(data(mimeText));
            if (text.match(/^\\s*.?\\s*$/)) {
                serverLog('Ignoring text with single or no character');
                return true;
            }
        }
        return false;
    }

    var onClipboardChanged_ = onClipboardChanged;
    onClipboardChanged = function() {
        if (!hasEmptyOrSingleCharText()) {
            onClipboardChanged_();
        }
    }

    var synchronizeFromSelection_ = synchronizeFromSelection;
    synchronizeFromSelection = function() {
        if (!hasEmptyOrSingleCharText()) {
            synchronizeFromSelection_();
        }
    }

    var synchronizeToSelection_ = synchronizeToSelection;
    synchronizeToSelection = function() {
        if (!hasEmptyOrSingleCharText()) {
            synchronizeToSelection_();
        }
    }
        "
48\IsScript=true
48\Icon=
49\Name=启动时执行...
49\Command="
    var onStartPrevious = global.onStart
    global.onStart = function() {
        onStartPrevious()
        // 检查条目是否过期
        check_items_expire()
        if ( !settings('ScreenResolution') )
            settings('ScreenResolution',getScreenResolution())
    }"
49\IsScript=true
49\Icon=
50\Name=获取屏幕分辨率
50\Command="
    global.getScreenResolution = function () {
        var x = 0
        var y = 0
        popup('正在获取屏幕分辨率... ', '鼠标指针自动移动是正常现象。\\n预计耗时大于30s，请耐心等待！', 30000)
        var i = 3
        while (i > -1) {
            try {
                x += 10 ** i
                setPointerPosition(x, y)
            } catch (error) {
                x -= 10 ** i
                i--
            }
        }
        i = 3
        while (i > -1) {
            try {
                y += 10 ** i
                setPointerPosition(x, y)
            } catch (error) {
                y -= 10 ** i
                i--
            }
        }
        setPointerPosition(++x / 2, ++y / 2)
        popup('屏幕分辨率为：'+[x, y])
        return [x, y]
    }"
50\IsScript=true
50\Icon=
51\Name=启动时显示主窗口
51\Command="
    var onStartPrevious = global.onStart
    global.onStart = function() {
        onStartPrevious()
        show()
    }"
51\IsScript=true
51\Enable=false
51\Icon=
52\Name=间隔30秒后清空系统剪贴板
52\Command="
    var timeoutSeconds = 30;
    function option() {
        return isClipboard()
            ? 'clear_clipboard/clipboard_change_counter'
            : 'clear_clipboard/selection_change_counter'
    }
    function getCount() {
        return Number(settings(option())) || 0
    }
    function bumpCounter() {
        var counter = getCount() + 1
        settings(option(), counter)
        return counter
    }
    function resetLater(counter) {
        for (var i = 0; i < timeoutSeconds && counter == getCount(); ++i) {
            sleep(1000)
        }
        if (counter != getCount())
            return
        if (isClipboard())
            copy('')
        else
            copySelection('')
    }
    var onClipboardChanged_ = onClipboardChanged
    onClipboardChanged = function() {
        var counter = bumpCounter()
        onClipboardChanged_()
        resetLater(counter)
    }
    var onOwnClipboardChanged_ = onOwnClipboardChanged
    onOwnClipboardChanged = function() {
        var counter = bumpCounter()
        onOwnClipboardChanged_()
        resetLater(counter)
    }"
52\IsScript=true
52\Enable=false
52\Icon=
53\Name=----------------------------------
53\Command="
    // 虚拟分割线




    "
53\InMenu=true
53\Enable=false
54\Name=显示为纯文本
54\Command="
    copyq:
    const mime = 'application/x-copyq-show-plain';
    const sel = ItemSelection().current();
    if (sel.length) {
        const enabled = str(sel.itemAtIndex(0)[mime]) == '1';
        sel.setItemsFormat(mime, enabled ? undefined : '1');
    } else {
        const enabled = str(data(mime)) == '1';
        if (enabled)
            removeData(mimeHtml);
    }"
54\Display=true
54\InMenu=true
54\Enable=false
54\Icon=A
54\Shortcut=ctrl+shift+x
55\Name=预览图片文件
55\Command="
    copyq:
    var prefix_reg = /^file:\\/+(.*)/
    var suffixToMime = {
        'png': 'image/png',
        'jpg': 'image/jpeg',
        'jpeg': 'image/jpeg',
        'bmp': 'image/bmp',
        'gif': 'image/gif',
        'svg': 'image/svg+xml',
        'ico': 'image/png',
        'webp': 'image/png',
    }

    function tryShowImage(mime) {
        var path = str(data(mime))
        path = path.replace(prefix_reg, '$1')
        if (!path) 
            return false
        var i = path.lastIndexOf('.')
        if (i == -1)
            return false
        var suffix = path.substring(i + 1)
        var imageMime = suffixToMime[suffix]
        if (imageMime === undefined)
            return false
        var f = new File(path)
        if (!f.openReadOnly())
            return false
        var imageData = f.readAll()
        f.close()
        if (imageData.size() === 0)
            return false
        setData(mimeItemNotes, path)
        setData(imageMime, imageData)
        return true
    }

    if (!hasImage()) {
        tryShowImage(mimeText) || tryShowImage(mimeUriList)
    }

    function hasImage() {
        var formats = dataFormats()
        for (var i in formats) {
            if (formats[i].match(/^image\\//)) {
                return true
            }
        }
        return false
    }"
55\Display=true
55\Icon=
56\Name=纯文本颜色标记
56\Command="
    copyq:
    if ( str(data(mimeText)) && !str(data(mimeHtml)) ) {
        html = escapeHtml(data(mimeText))
        setData(mimeHtml, '<span style=\"color:#4872B7\">' + html + '</span>')
    }"
56\Display=true
56\Icon=
57\Name=显示Hex颜色
57\Match=^#[0-9a-zA-Z]{6}
57\Command="
    copyq:
    setData(mimeColor, input());"
57\Input=text/plain
57\Display=true
57\Icon=
58\Name=----------------------------------
58\Command="
    // 虚拟分割线



    "
58\InMenu=true
58\Enable=false
59\Name=重命名MIME
59\Command="
    copyq:
    var old_Mime = 'application/x-copyq-user-copy-time'
    var new_Mime = 'application/x-copyq-user-item-time'
    var tab_names = tab()
    for (var i in tab_names) {
        var tab_name = tab_names[i]
        tab(tab_name)
        var item_count = count()

        for (var j = 0; j < item_count; ++j) {
            var time = str(read(old_Mime, j))
            if (time != '') {
                change(j, new_Mime, time)
                change(j, old_Mime, undefined)
            }
        }
    }"
59\InMenu=true
59\Enable=false
59\Icon=
60\Name=固定
60\Command="
    copyq: plugins.itempinned.pin()"
60\Input=!OUTPUT
60\Output=application/x-copyq-item-pinned
60\InMenu=true
60\Enable=false
60\Icon=
60\InternalId=copyq_pinned_pin
61\Name=解除固定
61\Command="
    copyq: plugins.itempinned.unpin()"
61\Input=application/x-copyq-item-pinned
61\InMenu=true
61\Enable=false
61\Icon=
61\InternalId=copyq_pinned_unpin
62\Name=切换标记 “重要”
62\Command="
    copyq: (plugins.itemtags.hasTag(decodeURIComponent('%E9%87%8D%E8%A6%81')) ? plugins.itemtags.untag : plugins.itemtags.tag)(decodeURIComponent('%E9%87%8D%E8%A6%81'))"
62\InMenu=true
62\Enable=false
62\Icon=
62\InternalId=copyq_tags_tag:重要
63\Name=添加一个标记
63\Command="
    copyq: plugins.itemtags.tag()"
63\InMenu=true
63\Enable=false
63\Icon=
63\InternalId=copyq_tags_tag
64\Name=移除一个标记
64\Command="
    copyq: plugins.itemtags.untag()"
64\Input=application/x-copyq-tags
64\InMenu=true
64\Enable=false
64\Icon=
64\InternalId=copyq_tags_untag
65\Name=清理所有标记
65\Command="
    copyq: plugins.itemtags.clearTags()"
65\Input=application/x-copyq-tags
65\InMenu=true
65\Enable=false
65\Icon=
65\InternalId=copyq_tags_clear
size=65