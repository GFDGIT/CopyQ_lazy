[Commands]
1\Name=清理当前标签页
1\MatchCommand="
    copyq: tab(selectedTab()); if (size() == 0) fail()"
1\Command="
    copyq:
    var source_tab = selectedtab()
    var sel = ItemSelection(selectedTab()).selectRemovable()

    if (sel.length === 0)
        abort()

    if (source_tab != settings('trash_tab')) {
        moveToTrash(source_tab, sel)
    } else {
        var text = dialog(
            '.title', '确认清理？',
            '.label', '<font size=8>⚠︎</font><font size=4>&nbsp;无法撤销！',
            '.combo:确认 ', ['是', '否']
        )
        if (text == '是') {
            sel.removeAll()
        }
    }"
1\InMenu=true
1\Icon=
2\Name=撤销删除
2\MatchCommand="
    copyq:
    var trash_tab = '回收站'
    if (selectedTab() == trash_tab) {
        menuItem['text'] = '恢复选中条目'
    } else {
        menuItem['text'] = '撤销上一次删除'
    }"
2\Command="
    copyq:
    // True：将条目恢复到原始位置
    // False：将条目恢复到标签页顶部
    // 在回收站选中条目进行恢复时，此项不生效，总是恢复到顶部
    var restore_index = true

    var trash_tab = settings('trash_tab')

    var tab_mime = 'application/x-copyq-user-tab'
    var index_mime = 'application/x-copyq-user-index'
    var time_mime = 'application/x-copyq-user-delete-time'
    var copy_time_mime = 'application/x-copyq-user-item-time'
    var tagsMime = 'application/x-copyq-tags'

    var remove_mime = [tab_mime, index_mime, time_mime]

    tab(trash_tab)
    if (length() == 0) {
        popup('没有可撤销删除的条目！')
        abort()
    }

    var target_index = 0
    var remove_items = []
    var select_items = []

    var trigger_tab = selectedTab()
    var newTime = dateString('yyyy-MM-dd hh:mm:ss')

    // 判断触发操作的标签页是否为回收站
    // 是：对选中的条目进行恢复
    // 否：对上一次删除的条目进行恢复
    if (trigger_tab == trash_tab) {
        var tabs = []
        select_items = ItemSelection().current().items()
        remove_items = selectedItems()
        for (var i in select_items) {
            var item = select_items[i]
            var target_tab = item[tab_mime]
            tabs.push(target_tab)
            item = update_mime(item)
            tab(target_tab)
            insert(target_index, item)
        }
        var tabs_num = getRepeatNum(tabs)
        var tabs_str = ''
        for (var t in tabs_num) {
            tabs_str += t + '：' + tabs_num[t] + '\\n'
        }
        popup('已恢复条目(标签页：数量)\\n' + tabs_str, '', 3000)

    } else {
        var items = []
        tab(trash_tab)

        // 获取回收站标签页的第一个条目
        // 以此条目的删除时间来查找同一时间删除的其他条目
        var item = getItem(0)
        var delete_time = item[time_mime]

        var target_tab = item[tab_mime] || selectedtab()
        for (let i = 0; i < length(); i++) {
            item = getitem(i)
            if (item[time_mime] == delete_time) {
                select_items.push(item[index_mime])
                item = update_mime(item)
                items.push(item)
                remove_items.push(i)
            }
        }

        show(target_tab)
        tab(target_tab)

        if (restore_index) {
            for (let i = 0; i < items.length; i++) {
                insert(select_items[i], items[i])
            }
        } else {
            select_items = []
            for (var j = 0; j < items.length; ++j) {
                select_items.push(target_index + j)
            }
            items.unshift(target_index)
            insert.apply(this, items)
        }

        selectItems.apply(this, select_items)

    }

    tab(trash_tab)
    remove.apply(this, remove_items)

    // 删除多余MIME，并更新复制时间
    function update_mime(item) {
        for (var j in remove_mime) {
            delete item[remove_mime[j]]
        }
        item[copy_time_mime] = newTime
        var old_tag = str(item[tagsMime])
        if (old_tag != 'undefined') {
            var old_time = old_tag.match(/\\d{4}-\\d{2}-\\d{2} \\d{2}\\:\\d{2}\\:\\d{2}/)
            if (old_time) {
                item[tagsMime] = old_tag.replace(old_time, newTime)
            } else {
                item[tagsMime] = newTime + ',' + old_tag
            }
        } else {
            item[tagsMime] = newTime
        }
        return item
    }

    // 统计恢复到每个标签页的条目数量
    function getRepeatNum(arr) {
        var obj = {};
        for (var i = 0, l = arr.length; i < l; i++) {
            var item = arr[i];
            obj[item] = (obj[item] + 1) || 1;
        }
        return obj;
    }
    "
2\InMenu=true
2\Icon=
2\Shortcut=ctrl+z
3\Name=删除至回收站
3\MatchCommand="
    copyq:
    var trash_tab = settings('trash_tab')
    if (selectedtab() == trash_tab) {
        menuItem['text'] = '彻底删除'
        menuItem['icon'] = ''
    } else {
        menuItem['text'] = '删除至回收站'
        menuItem['icon'] = ''
    } "
3\Command="
    copyq:
    var source_tab = selectedtab()
    var sel = ItemSelection().current()
    const rows = sel.rows()

    if (rows.length === 0)
        abort()

    var pinned = []

    if (source_tab != settings('trash_tab')) {
        for (var i = 0; i < sel.length; ++i) {
            if (plugins.itempinned.isPinned(rows[i]))
                pinned.push(i)
        }
        if (pinned.length > 0) {
            sel.deselectIndexes(pinned)
            for (var i = 0; i < pinned.length; i++) {
                pinned[i] = pinned[i] + 1
            }
            popup('固定的条目不能被删除！', '选择中的第 ' + pinned + ' 条已固定。', time = 2000)
        }
        moveToTrash(source_tab, sel)
    }
    else {
        var text = dialog(
            '.title', '确认删除？',
            '.label', '<font size=8>⚠︎</font><font size=4>&nbsp;无法撤销！',
            '.combo:确认 ', ['是', '否']
        )
        if (text == '是') {
            sel.removeAll()
        }
    }

    var newCurrentRow = rows[0]
    if (newCurrentRow >= length())
        newCurrentRow = length() - 1
    selectItems(newCurrentRow)"
3\InMenu=true
3\Icon=
3\Shortcut=del
4\Name=移至回收站
4\Command="
    copyq:
    var trash_tab = '回收站'
    var tab_mime = 'application/x-copyq-user-tab'
    var index_mime = 'application/x-copyq-user-index'
    var time_mime = 'application/x-copyq-user-delete-time'
    var maxitems = config('maxitems')

    if (!settings('trash_tab'))
        settings('trash_tab', trash_tab)

    tab(trash_tab)
    var available = maxitems - count()

    global.moveToTrash = function (source_tab, sel) {
        const rows = sel.rows()
        if (rows.length > available) {
            popup('待删除条目过多，无法移至回收站。\\n请先清理回收站，或调大条目历史数量上限。',3000)
            return 0
        } 
       
        var time = (new Date).toISOString()
        tab(source_tab)
        var trashed = []

        for (var i = 0; i < sel.length; ++i) {
            var item = sel.itemAtIndex(i)
            // Workaround: Convert QByteArray to ByteArray.
            for (var format in item)
                item[format] = ByteArray(item[format])
            item[tab_mime] = source_tab
            item[index_mime] = rows[i]
            item[time_mime] = time
            trashed.push(item)
        }

        tab(trash_tab)
        write(0, trashed)
        tab(source_tab)
        sel.removeAll()

        return 1
    }"
4\IsScript=true
4\Icon=
size=4